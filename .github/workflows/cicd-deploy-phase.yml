name: cicd-deploy-test-workflow-dispatch

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      feature_branch:
        description: 'Feature branch to operate on'
        required: true
        default: 'main'
      environment:
        description: 'Deployment environment'
        required: true
        default: 'development'

jobs:
  log-errors:
    runs-on: ubuntu-latest
    steps:
      - name: Generate logs with errors
        run: |
          echo "This is a normal log message."

  
  fetch-feature-branch:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'qc'
    needs: log-errors
    env:
      OWNER: 'Purna88836'
      REPO: ${{ github.repository }}
      WORKFLOW_NAME: 'cicd-deploy-test-workflow-dispatch'
      PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
    steps:

      - name: test-phase..
        run: |
          echo "$REPO"
          curl_output=$(curl -s -H "Authorization: Bearer ${PERSONAL_ACCESS_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/$REPO/actions/workflows")
          echo "$curl_output"

      - name: Fetch the workflow ID by name
        id: get_workflow_id
        run: |
          echo "$REPO"
          workflow_id=$(curl -s -H "Authorization: Bearer ${PERSONAL_ACCESS_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/$REPO/actions/workflows" | \
            jq --arg workflow_name "$WORKFLOW_NAME" '.workflows[] | select(.name == $workflow_name) | .id')
          echo "$workflow_id"
          echo "::set-output name=workflow_id::$workflow_id"

      - name: test feature branch output.
        run: |
          api_response=$(curl -s -H "Authorization: Bearer ${PERSONAL_ACCESS_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/$REPO/actions/workflows/${{ steps.get_workflow_id.outputs.workflow_id }}/runs?event=workflow_dispatch&status=success&per_page=100")
           echo "Filtered API Response:"
           echo "$api_response" | jq '.workflow_runs[] | {conclusion, inputs}'

      - name: Use the workflow ID to fetch the latest successful run's feature branch
        run: |
          feature_branch=$(curl -s -H "Authorization: Bearer ${PERSONAL_ACCESS_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/$REPO/actions/workflows/${{ steps.get_workflow_id.outputs.workflow_id }}/runs?event=workflow_dispatch&status=success&per_page=100" | \
            jq -r --arg environment "${{ github.event.inputs.environment }}" \
              '.workflow_runs | 
              map(select(.conclusion == "success" and .inputs.environment == $environment)) | 
              sort_by(.created_at) | reverse | 
              .[0].inputs.feature_branch')
          echo "Feature branch of the last successful run: $feature_branch"

  log-warning-test-step:
    runs-on: ubuntu-latest
    needs: fetch-feature-branch
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Generate logs with warnings
        run: |
          echo "This is a normal warning message."
          echo "::warning file=app.js,line=20,col=5::This is a warning message."
      - name: Summarize Warning Logs
        run: |
          echo '### Warning Summary' > $GITHUB_STEP_SUMMARY
          echo 'A warning was generated in `app.js` at line 20, column 5.' >> $GITHUB_STEP_SUMMARY
