name: cicd-deploy-test-workflow-dispatch

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      feature_branch:
        description: 'Feature branch to operate on'
        required: true
        default: 'main'
      environment:
        description: 'Deployment environment'
        required: true
        default: 'development'

jobs:
  log-errors:
    runs-on: ubuntu-latest
    steps:
      - name: Generate logs with errors
        run: |
          echo "This is a normal log message."

  
  fetch-feature-branch:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'qc'
    needs: log-errors
    env:
      OWNER: 'Purna88836'
      REPO: ${{ github.repository }}
      WORKFLOW_NAME: 'cicd-deploy-test-workflow-dispatch'
      PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      feature_branch_name: ${{ inputs.feature_branch }}
    steps:

      - name: test-phase..
        run: |
          echo "$REPO"
          curl_output=$(curl -s -H "Authorization: Bearer ${PERSONAL_ACCESS_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/$REPO/actions/workflows")
          echo "$curl_output"

      - name: Fetch the workflow ID by name
        id: get_workflow_id
        run: |
          echo "$REPO"
          workflow_id=$(curl -s -H "Authorization: Bearer ${PERSONAL_ACCESS_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/$REPO/actions/workflows" | \
            jq --arg workflow_name "$WORKFLOW_NAME" '.workflows[] | select(.name == $workflow_name) | .id')
          echo "$workflow_id"
          echo "::set-output name=workflow_id::$workflow_id"

      - name: Fetch and Check Workflow Runs
        run: |
          page=1
          found=""
          while [ -z "$found" ]; do
            response=$(curl -s -H "Authorization: Bearer $PERSONAL_ACCESS_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/$REPO/actions/workflows/${{ steps.get_workflow_id.outputs.workflow_id }}/runs?event=workflow_dispatch&status=success&per_page=5&page=$page")
            for run_id in $(echo "$response" | jq -r '.workflow_runs[].id'); do
              echo "Checking logs for run ID: $run_id"
              log_url=$(echo "$response" | jq -r --arg id "$run_id" '.workflow_runs[] | select(.id == ($id | tonumber)).logs_url')
              curl -H "Authorization: Bearer $PERSONAL_ACCESS_TOKEN" \
                   -H "Accept: application/vnd.github+json" \
                   -L "$log_url" -o workflow-logs-$run_id.zip
              unzip "workflow-logs-$run_id.zip" -d "workflow-logs-$run_id"
              if grep -q 'environment: stage' workflow-logs-$run_id/*.txt; then
                echo "Environment 'stage' found in run ID: $run_id"
                feature_branch_name=$(grep 'feature_branch_name' workflow-logs-$run_id/*.txt | cut -d ':' -f2 | xargs)
                echo "Feature branch name for 'stage': $feature_branch_name"
                found="true"
                break
              fi
              rm -rf "workflow-logs-$run_id" "workflow-logs-$run_id.zip" # Clean up if not the right environment
            done
            if [ -z "$found" ]; then
              ((page++))
              echo "No 'stage' environment found on page $page. Checking next page..."
            else
              break
            fi
          done
          if [ -n "$feature_branch_name" ]; then
            echo "FEATURE_BRANCH_NAME=$feature_branch_name" >> $GITHUB_ENV
          else
            echo "Failed to find a workflow run with the 'stage' environment."
            exit 1
          fi

      - name: Use the Feature Branch
        if: env.FEATURE_BRANCH_NAME
        run: |
          echo "Using feature branch: ${{ env.FEATURE_BRANCH_NAME }}"
          # Further actions using the feature branch can be performed here

  log-warning-test-step:
    runs-on: ubuntu-latest
    needs: fetch-feature-branch
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Generate logs with warnings
        run: |
          echo "This is a normal warning message."
          echo "::warning file=app.js,line=20,col=5::This is a warning message."
      - name: Summarize Warning Logs
        run: |
          echo '### Warning Summary' > $GITHUB_STEP_SUMMARY
          echo 'A warning was generated in `app.js` at line 20, column 5.' >> $GITHUB_STEP_SUMMARY
